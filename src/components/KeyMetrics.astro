---
interface Props {
  metrics: Array<{
    value: string;
    label: string;
    benchmark?: string;
  }>;
}

const { metrics } = Astro.props;
---

<div class="key-metrics">
    <div class="metrics-grid">
        {metrics.map(metric => (
            <div class="metric-card">
                <div class="metric-value">{metric.value}</div>
                <div class="metric-label">{metric.label}</div>
                {metric.benchmark && (
                    <div class="metric-benchmark">{metric.benchmark}</div>
                )}
            </div>
        ))}
    </div>
</div>

<style>
.key-metrics {
    margin: 2rem 0;
}

.metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
}

.metric-card {
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1.5rem;
    text-align: center;
    transition: all 0.3s ease;
}

.metric-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.metric-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

.metric-label {
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.3rem;
}

.metric-benchmark {
    font-size: 0.8rem;
    color: var(--text-secondary);
}

@media (max-width: 768px) {
    .metrics-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .metric-value {
        font-size: 1.5rem;
    }
}
</style> 